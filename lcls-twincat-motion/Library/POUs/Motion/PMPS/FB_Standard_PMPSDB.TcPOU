<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Standard_PMPSDB" Id="{52f7b5a3-5818-4b33-bcd8-067d0c9d8102}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Standard_PMPSDB
(*
    This FB should be run on every motion PLC to encapsulate the pmps file reader.
    It is pre-instantiated at MOTION_GVL.fbStandardPMPSDB
*)
VAR_IN_OUT
    // The fast fault output to fault to.
    io_fbFFHWO: FB_HardwareFFOutput;
END_VAR
VAR_INPUT
    // If TRUE, FB will run. Reads when enable goes TRUE.
    bEnable: BOOL;
    // E.g. lfe-motion
    sPlcName: STRING;
    {attribute 'pytmc' := '
        pv: REFRESH
        io: io
    '}
    // Set to TRUE to cause an extra read.
    bRefresh: BOOL;
    // Directory where the DB is stored.
    sDirectory: STRING := '';
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: LAST_REFRESH
        io: i
    '}
    nLastRefreshTime: DINT;
    bReadPmpsDb: BOOL;
END_VAR
VAR
    bExecute: BOOL;
    rtEnable: R_TRIG;
    rtRefresh: R_TRIG;
    ftBusy: F_TRIG;

    // Time tracking liften from Arbiter PLCs
    fbTime : FB_LocalSystemTime := ( bEnable := TRUE, dwCycle := 1 );
    fbTime_to_UTC: FB_TzSpecificLocalTimeToSystemTime;
    fbGetTimeZone: FB_GetTimeZoneInformation;

    fbIPCReg: FB_IPCDiag_Register;
    fbCheckOS: FB_IPCDiag_ReadParameter;
    sOSName: STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bEnable THEN
    RETURN;
END_IF

rtEnable(CLK:=bEnable);
rtRefresh(CLK:=bRefresh);
bRefresh := FALSE;

IF rtEnable.Q OR rtRefresh.Q THEN
    // Make sure file reader gets a rising edge
    MOTION_GVL.fbPmpsFileReader(
        io_fbFFHWO:=io_fbFFHWO,
        bExecute:=FALSE,
    );
    bExecute := TRUE;
END_IF

IF sDirectory = '' THEN
    // Check OS for default directory
    fbIPCReg(bExecute:=TRUE);
    fbCheckOS(
        bExecute:=NOT fbIPCReg.bBusy,
        eParameterKey:=E_IPCDiag_ParameterKey.OS_Name,
        fbRegister:=fbIPCReg,
    );
    IF fbCheckOS.bValid THEN
        fbCheckOS.GetParameter(
            pBuffer:=ADR(sOSName),
            nBufferSize:=SIZEOF(sOSName),
        );
    END_IF
    IF sOSName = 'TwinCAT/BSD' THEN
        sDirectory := '/home/ecs-user/pmpsdb/';
    ELSIF sOSName <> '' THEN
        sDirectory := '/Hard Disk/ftp/PMPS/';
    END_IF
END_IF

MOTION_GVL.fbPmpsFileReader(
    io_fbFFHWO:=io_fbFFHWO,
    bExecute:=bExecute AND sDirectory <> '',
    sSrcPathName:=CONCAT(CONCAT(sDirectory, sPlcName), '.json'),
    sPLCName:=sPLCName,
    PMPS_jsonDoc=>PMPS_GVL.BP_jsonDoc,
);

ftBusy(CLK:=MOTION_GVL.fbPmpsFileReader.bBusy);
IF ftBusy.Q THEN
    bReadPmpsDb := TRUE;
ELSE
    bReadPmpsDb := FALSE;
END_IF


// Lifted from Arbiter PLCs: keep track of the time
fbTime(sNetID:='');
fbGetTimeZone(sNetID:='', bExecute:=TRUE, tTimeout:=T#10S);
fbTime_to_UTC(in:= fbTime.systemTime , tzInfo:=fbGetTimeZone.tzInfo);

// Update the refresh time on successful read
IF ftBusy.Q AND NOT MOTION_GVL.fbPmpsFileReader.bError THEN
   nLastRefreshTime := TO_DINT(TO_DT(SystemTime_TO_DT(fbTime_to_UTC.out)));
END_IF

bExecute R= ftBusy.Q;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>