<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PositionStateReadND_Test" Id="{4b592fad-9c2c-4bce-a31b-7960aad2ca81}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PositionStateReadND_Test EXTENDS TcUnit.FB_TestSuite
(*
    Test that FB_PositionStateReadND can be used to read and summarize
    N-dimensional state positions where multiple motors must move in
    sync to a shared named state.
*)
VAR
    astMotionStage: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ST_MotionStage;
    afbMotionStage: ARRAY[1..3] OF FB_MotionStage;
    astPositionState: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ARRAY [1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    afbInternal: ARRAY[1..3] OF ARRAY [1..2] OF FB_PositionStateInternal;
    afbTestMove: ARRAY[1..3] OF FB_TestHelperSetAndMove;
    fbRead: FB_PositionStateReadND;
    bOneAssertDone: BOOL;
    nIter1: UINT;
    nIter2: UINT;
    nIter3: UINT;

    fbMisRead: FB_PositionStateReadND;
    astGoodStage: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ST_MotionStage;
    astGoodStateShape: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ARRAY [1..GeneralConstants.MAX_STATES] OF ST_PositionState;
END_VAR
VAR CONSTANT
    NO_STATE: UINT := 0;
    OUT_STATE: UINT := 1;
    IN_STATE: UINT := 2;
    IN_TWEAK: UINT := 3;
    AWAY: UINT := 4;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
PerMotor(1);
PerMotor(2);
PerMotor(3);

// First check the case of mismatched arrays
TestForgot();

// Each motor can be at no state, at OUT, at OUT and moving, at IN, at IN and moving, or moving away from a state
FOR nIter1 := NO_STATE TO AWAY DO
    FOR nIter2 := NO_STATE TO AWAY DO
        FOR nIter3 := NO_STATE TO AWAY DO
            // This should be one big test case with 125 asserts
            TestCombos(nIter1, nIter2, nIter3);
        END_FOR
    END_FOR
END_FOR

IF bOneAssertDone THEN
    bOneAssertDone := FALSE;
    afbTestMove[1](
        stMotionStage:=astMotionStage[1],
        bExecute:=FALSE,
    );
    afbTestMove[2](
        stMotionStage:=astMotionStage[2],
        bExecute:=FALSE,
    );
    afbTestMove[3](
        stMotionStage:=astMotionStage[3],
        bExecute:=FALSE,
    );
END_IF]]></ST>
    </Implementation>
    <Method Name="DoAssert" Id="{80756ff2-0af2-4418-83af-c425e1ba5c62}">
      <Declaration><![CDATA[METHOD PRIVATE DoAssert
VAR_INPUT
    nMotorCase1: UINT;
    nMotorCase2: UINT;
    nMotorCase3: UINT;
END_VAR
VAR
    bKnownState: BOOL;
    bMovingState: BOOL;
    nPositionIndex: DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
AssertFalse(
    Condition:=afbTestMove[1].tElapsed > T#5s,
    Message:='Timeout for motor 1',
);
AssertFalse(
    Condition:=afbTestMove[2].tElapsed > T#5s,
    Message:='Timeout for motor 2',
);
AssertFalse(
    Condition:=afbTestMove[3].tElapsed > T#5s,
    Message:='Timeout for motor 3',
);

// All at OUT or all at IN should be OUT and IN respectively, even if doing a tweak move
// Any other combination is at no state
IF nMotorCase1 = OUT_STATE AND nMotorCase2 = OUT_STATE AND nMotorCase3 = OUT_STATE THEN
    bKnownState := TRUE;
    nPositionIndex := 1;
ELSIF (nMotorCase1 = IN_STATE OR nMotorCase1 = IN_TWEAK) AND
      (nMotorCase2 = IN_STATE OR nMotorCase2 = IN_TWEAK) AND
      (nMotorCase3 = IN_STATE OR nMotorCase3 = IN_TWEAK) THEN
    bKnownState := TRUE;
    nPositionIndex := 2;
END_IF
// In addition, bMovingState must be set if any is moving away from a state
IF nMotorCase1 = AWAY OR nMotorCase2 = AWAY OR nMotorCase3 = AWAY THEN
    bMovingState := TRUE;
END_IF

AssertEquals_BOOL(
    Expected:=bKnownState,
    Actual:=fbRead.bKnownState,
    Message:='Wrong bKnownState',
);
AssertEquals_BOOL(
    Expected:=bMovingState,
    Actual:=fbRead.bMovingState,
    Message:='Wrong bMovingState',
);
AssertEquals_DINT(
    Expected:=nPositionIndex,
    Actual:=fbRead.nPositionIndex,
    Message:='Wrong nPositionIndex',
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoMove" Id="{b2902d75-90e1-4000-aeee-9bd6641cfb93}">
      <Declaration><![CDATA[METHOD PRIVATE DoMove: BOOL
VAR_INPUT
    nMotorIndex: UINT;
    nMotorCase: UINT;
END_VAR
VAR
    fStartPosition: LREAL;
    fGoalPosition: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE nMotorCase OF
    // Somewhere smaller than OUT, static
    NO_STATE:
        fStartPosition := astPositionState[nMotorIndex][1].fPosition - 10 * astPositionState[nMotorIndex][1].fDelta;
        fGoalPosition := fStartPosition;
    // Exactly at OUT, static
    OUT_STATE:
        fStartPosition := astPositionState[nMotorIndex][1].fPosition;
        fGoalPosition := fStartPosition;
    // Exactly at IN, static
    IN_STATE:
        fStartPosition := astPositionState[nMotorIndex][2].fPosition;
        fGoalPosition := fStartPosition;
    // Start at IN, do a small tweak
    IN_TWEAK:
        fStartPosition := astPositionState[nMotorIndex][2].fPosition;
        fGoalPosition := fStartPosition + 0.9 * astPositionState[nMotorIndex][2].fDelta;
    // Start at IN, move positive a lot
    AWAY:
        fStartPosition := astPositionState[nMotorIndex][2].fPosition;
        fGoalPosition := fStartPosition + 100 * astPositionState[nMotorIndex][2].fDelta;
END_CASE

afbTestMove[nMotorIndex](
    stMotionStage:=astMotionStage[nMotorIndex],
    bExecute:=TRUE,
    fStartPosition:=fStartPosition,
    fGoalPosition:=fGoalPosition,
    fVelocity:=0.001,
    bHWEnable:=TRUE,
);

CASE nMotorCase OF
    // All static states: report ready when set is done
    NO_STATE:
        DoMove := afbTestMove[nMotorIndex].bSetDone;
    OUT_STATE:
        DoMove := afbTestMove[nMotorIndex].bSetDone;
    IN_STATE:
        DoMove := afbTestMove[nMotorIndex].bSetDone;
    // All moving states: report ready when move starts
    IN_TWEAK:
        DoMove := afbTestMove[nMotorIndex].bMotionStarted;
    AWAY:
        DoMove := afbTestMove[nMotorIndex].bMotionStarted;
END_CASE
// Universal 5s timeout
DoMove S= afbTestMove[nMotorIndex].tElapsed > T#5s;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoRead" Id="{6f669269-657a-4dd2-a5a9-367d17113825}">
      <Declaration><![CDATA[METHOD PRIVATE DoRead
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbRead(
    astMotionStage:=astMotionStage,
    astPositionState:=astPositionState,
    nActiveMotorCount:=3,
);
    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="PerMotor" Id="{f47ebc9f-5057-42b7-ab63-07c822af4c4b}">
      <Declaration><![CDATA[METHOD PRIVATE PerMotor : BOOL
VAR_INPUT
    nIndex: DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
afbMotionStage[nIndex](stMotionStage:=astMotionStage[nIndex]);

astPositionState[nIndex][1].sName := 'OUT';
astPositionState[nIndex][1].fPosition := nIndex * 100 + 10;
astPositionState[nIndex][1].fDelta := 1;
astPositionState[nIndex][1].bValid := TRUE;
astPositionState[nIndex][1].bUseRawCounts := FALSE;
afbInternal[nIndex][1](
    stMotionStage:=astMotionStage[nIndex],
    stPositionState:=astPositionState[nIndex][1],
);

astPositionState[nIndex][2].sName := 'IN';
astPositionState[nIndex][2].fPosition := nIndex * 100 + 20;
astPositionState[nIndex][2].fDelta := 1;
astPositionState[nIndex][2].bValid := TRUE;
astPositionState[nIndex][2].bUseRawCounts := FALSE;
afbInternal[nIndex][2](
    stMotionStage:=astMotionStage[nIndex],
    stPositionState:=astPositionState[nIndex][2],
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestCombos" Id="{481100c9-0915-4b4e-b684-ec082ca225fc}">
      <Declaration><![CDATA[METHOD PRIVATE TestCombos
VAR_INPUT
    nMotor1Case: UINT;
    nMotor2Case: UINT;
    nMotor3Case: UINT;
END_VAR
VAR
    bReady1: BOOL;
    bReady2: BOOL;
    bReady3: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// This should be one big test case with 125 asserts
TEST('TestAllCombos');

bReady1 := DoMove(1, nMotor1Case);
bReady2 := DoMove(2, nMotor2Case);
bReady3 := DoMove(3, nMotor3Case);

IF bReady1 AND bReady2 AND bReady3 THEN
    DoRead();
    DoAssert(nMotor1Case, nMotor2Case, nMotor3Case);
    bOneAssertDone := TRUE;
    // The final assert case marks test as finished
    IF nMotor1Case = AWAY AND nMotor2Case = AWAY AND nMotor3Case = AWAY THEN
        TEST_FINISHED();
    END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestForgot" Id="{8ee66784-0269-4074-a44f-3e9eda7e6735}">
      <Declaration><![CDATA[METHOD PRIVATE TestForgot
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('ForgotCount');

fbMisRead(
    astMotionStage:=astGoodStage,
    astPositionState:=astGoodStateShape,
);

AssertTrue(
    Condition:=fbMisRead.bMotorCountError,
    Message:='Failed to notice missing count',
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>