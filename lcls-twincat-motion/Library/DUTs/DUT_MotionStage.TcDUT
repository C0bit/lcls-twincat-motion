<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <DUT Name="DUT_MotionStage" Id="{10b5775d-5646-4d55-ad77-40abc3888de3}">
    <Declaration><![CDATA[TYPE DUT_MotionStage :
STRUCT
	(* Hardware *)
	
	// PLC Axis Reference
	Axis: AXIS_REF;
	// NC Forward Limit Switch: TRUE if ok to move
	{attribute 'pytmc': '
		pv: IO:ENA:FWD
		io: i
	'}
	bLimitForwardEnable AT %I*: BOOL;
	// NC Backward Limit Switch: TRUE if ok to move
	{attribute 'pytmc': '
		pv: IO:ENA:BWD
		io: i
	'}
	bLimitBackwardEnable AT %I*: BOOL;
	// NO Home Switch: TRUE if at home
	{attribute 'pytmc': '
		pv: IO:HOME
		io: i
	'}
	bHome AT %I*: BOOL;
	// NC Brake Output: TRUE to release brake
	{attribute 'pytmc': '
		pv: IO:BRAKE
		io: i
	'}
	bBrakeRelease AT %Q*: BOOL;
	// NC STO Input: TRUE if ok to move
	{attribute 'pytmc': '
		pv: IO:STO
		io: i
	'}
	bHardwareEnable AT %I*: BOOL;

	(* Psuedo-hardware *)
	
	// Forward enable EPS summary
	{attribute 'pytmc': '
		pv: EPS:ENA:FWD
		io: i
	'}
	bAllForwardEnable: BOOL:=FALSE;
	// Backward enable EPS summary
	{attribute 'pytmc': '
		pv: EPS:ENA:BWD
		io: i
	'}
	bAllBackwardEnable: BOOL:=FALSE; 
	// Enable EPS summary encapsulating emergency stop button and any additional motion preventive hardware
	{attribute 'pytmc': '
		pv: EPS:ENA:AMP
		io: i
	'}
	bAllEnable: BOOL:=FALSE;
	// Forward virtual gantry limit switch
	{attribute 'pytmc': '
		pv: GANTRY:ENA:FWD
		io: i
	'}
	bGantryForwardEnable: BOOL:=FALSE;
	// Backward virtual gantry limit switch
	{attribute 'pytmc': '
		pv: GANTRY:ENA:BWD
		io: i
	'}
	bGantryBackwardEnable: BOOL:=FALSE;
	
	(* Settings *)
	// Change to FALSE if MC_POWER is somewhere else in the project
	{attribute 'pytmc': '
		pv: SETTING:bPowerSelf
		io: i
	'}
	bPowerSelf: BOOL:=TRUE;
	// Determines when we automatically enable the motor
	{attribute 'pytmc': '
		pv: SETTING:nEnableMode
		io: i
	'}
	nEnableMode: INT:=ENUM_StageEnableMode.STAGE_ENABLE_MOTION;
	// Determines when we automatically disengage the brake
	{attribute 'pytmc': '
		pv: SETTING:nBrakeMode
		io: i
	'}
	nBrakeMode: INT:=ENUM_StageBrakeMode.STAGE_BRAKE_DISABLED;
	// Determines our encoder homing strategy
	{attribute 'pytmc': '
		pv: SETTING:nHomingMode
		io: i
	'}
	nHomingMode: INT:=ENUM_EpicsHomeCmd.EPICS_MOTOR_HOME_NONE;
	// Set true to activate gantry EPS
	{attribute 'pytmc': '
		pv: SETTING:bGantryAxis
		io: i
	'}
	bGantryAxis: BOOL:=FALSE;
	// Set to gantry difference tolerance
	{attribute 'pytmc': '
		pv: SETTING:nGantryTol
		io: i
	'}
	nGantryTol: LINT:=0;
	// Encoder count at which this axis is aligned with other axis
	{attribute 'pytmc': '
		pv: SETTING:nEncRef
		io: i
	'}
	nEncRef: ULINT:=0;
	
	(* Commands *)
	// Used internally to request enables
	{attribute 'pytmc': '
		pv: CMD:bEnable
		io: io
	'}
	bEnable: BOOL;
	// Used internally to reset errors and other state
	{attribute 'pytmc': '
		pv: CMD:bReset
		io: io
	'}
	bReset: BOOL;
	// Used internally and by the IOC to start or stop a move
	{attribute 'pytmc': '
		pv: CMD:bExecute
		io: io
	'}
	bExecute: BOOL;
	
	(* Command Args *)
	// Used internally and by the IOC to pick what kind of move to do
	{attribute 'pytmc': '
		pv: ARG:nCommand
		io: io
	'}
	nCommand: INT;
	// Used internally and by the IOC to pass additional data to some commands
	{attribute 'pytmc': '
		pv: ARG:nCmdData
		io: io
	'}
	nCmdData: INT;
	// Used internally and by the IOC to pick a destination for the move
	{attribute 'pytmc': '
		pv: ARG:fPosition
		io: io
	'}
	fPosition: LREAL;
	// Used internally and by the IOC to pick a move velocity
	{attribute 'pytmc': '
		pv: ARG:fVelocity
		io: io
	'}
	fVelocity: LREAL;
	// Used internally and by the IOC to pick a move acceleration
	{attribute 'pytmc': '
		pv: ARG:fAcceleration
		io: io
	'}
	fAcceleration: LREAL;
	// Used internally and by the IOC to pick a move deceleration
	{attribute 'pytmc': '
		pv: ARG:fDeceleration
		io: io
	'}
	fDeceleration: LREAL;
	// Used internally and by the IOC to pick a home position
	{attribute 'pytmc': '
		pv: ARG:fHomePosition
		io: io
	'}
	fHomePosition: LREAL;
	
	(* Info *)
	// Unique ID assigned to each axis in the NC
	{attribute 'pytmc': '
		pv: ID
		io: i
	'}
	nMotionAxisID: UDINT:=0;
	
	(* Returns *)
	// TRUE if done enabling
	{attribute 'pytmc': '
		pv: RVAL:bEnableDone
		io: i
	'}
	bEnableDone: BOOL;
	// TRUE if in the middle of a command
	{attribute 'pytmc': '
		pv: RVAL:bBusy
		io: i
	'}
	bBusy: BOOL;
	// TRUE if we've done a command and it has finished
	{attribute 'pytmc': '
		pv: RVAL:bDone
		io: i
	'}
	bDone: BOOL;
	// TRUE if we're in an error state
	{attribute 'pytmc': '
		pv: RVAL:bError
		io: i
	'}
	bError: BOOL;
	// Message to identify the error state
	{attribute 'pytmc': '
		pv: RVAL:sErrorMessage
		io: i
	'}
	sErrorMessage: STRING;
	// Misc axis status information for the IOC
	stAxisStatus: DUT_AxisStatus_v0_01;
END_STRUCT
END_TYPE
]]></Declaration>
  </DUT>
</TcPlcObject>
