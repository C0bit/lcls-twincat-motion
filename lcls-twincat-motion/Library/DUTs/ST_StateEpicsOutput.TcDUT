<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <DUT Name="ST_StateEpicsOutput" Id="{0bd1a15c-ee9d-44da-ade2-e20a29b11748}">
    <Declaration><![CDATA[TYPE ST_StateEpicsOutput :
(*
    This data structure contains the standard EPICS connection points for the state movers.

    It includes everything except the GET PV, which cannot be included here
    as it is sourced from enum values unique to the application, and the array PVs,
    which can be an array of various lengths, so it must be set in the FB that defines the
    static array size.

    A placeholder for GET is included here, with commented-out pragmas that
    demonstrate what they would look like if we could include them.
    This placeholders are actively used by state blocks even though they are not exposed
    directly to EPICS. You are expected to set your EPICS-linked GET enum
    using the GET placeholder's output.
*)
STRUCT
    // Get your enum value from this value at the end of the cycle.
    (*
    Example of what the pragma would be if we had your enum:
    {attribute 'pytmc' := '
        pv: GET
        io: i
    '}
    *)
    nGetValue: UINT;
    // This will be TRUE when we are in an active state move and FALSE otherwise.
    {attribute 'pytmc' := '
        pv: BUSY
        io: i
        field: ZNAM False
        field: ONAM True
    '}
    bBusy: BOOL;
    // This will be TRUE after a move completes and FALSE otherwise.
    {attribute 'pytmc' := '
        pv: DONE
        io: i
        field: ZNAM False
        field: ONAM True
    '}
    bDone: BOOL;
    // This will be TRUE if the most recent move had an error and FALSE otherwise.
    {attribute 'pytmc' := '
        pv: ERR
        io: i
        field: ZNAM False
        field: ONAM True
    '}
    bError: BOOL;
    // This will be set to an NC error code during an error if one exists or left at 0 otherwise.
    {attribute 'pytmc' := '
        pv: ERRID
        io: i
    '}
    nErrorID: UDINT;
    // This will be set to an appropriate error message during an error if one exists or left as an empty string otherwise.
    {attribute 'pytmc' := '
        pv: ERRMSG
        io: i
    '}
    sErrorMsg: STRING;
END_STRUCT
END_TYPE
]]></Declaration>
  </DUT>
</TcPlcObject>